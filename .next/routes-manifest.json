{
  "version": 3,
  "pages404": true,
  "caseSensitive": false,
  "basePath": "",
  "redirects": [
    {
      "source": "/:path+/",
      "destination": "/:path+",
      "internal": true,
      "statusCode": 308,
      "regex": "^(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))/$"
    }
  ],
  "headers": [],
  "dynamicRoutes": [
    {
      "page": "/nft/[id]",
      "regex": "^/nft/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPid": "nxtPid"
      },
      "namedRegex": "^/nft/(?<nxtPid>[^/]+?)(?:/)?$"
    }
  ],
  "staticRoutes": [
    {
      "page": "/",
      "regex": "^/(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/(?:/)?$"
    },
    {
      "page": "/_not-found",
      "regex": "^/_not\\-found(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/_not\\-found(?:/)?$"
    },
    {
      "page": "/about",
      "regex": "^/about(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/about(?:/)?$"
    },
    {
      "page": "/accessories",
      "regex": "^/accessories(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/accessories(?:/)?$"
    },
    {
      "page": "/auth/login",
      "regex": "^/auth/login(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/auth/login(?:/)?$"
    },
    {
      "page": "/auth/register",
      "regex": "^/auth/register(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/auth/register(?:/)?$"
    },
    {
      "page": "/categories/cycling",
      "regex": "^/categories/cycling(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/categories/cycling(?:/)?$"
    },
    {
      "page": "/categories/swimming",
      "regex": "^/categories/swimming(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/categories/swimming(?:/)?$"
    },
    {
      "page": "/categories/tourism",
      "regex": "^/categories/tourism(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/categories/tourism(?:/)?$"
    },
    {
      "page": "/categories/winter-sports",
      "regex": "^/categories/winter\\-sports(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/categories/winter\\-sports(?:/)?$"
    },
    {
      "page": "/clothing",
      "regex": "^/clothing(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/clothing(?:/)?$"
    },
    {
      "page": "/cycling",
      "regex": "^/cycling(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/cycling(?:/)?$"
    },
    {
      "page": "/faq",
      "regex": "^/faq(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/faq(?:/)?$"
    },
    {
      "page": "/home",
      "regex": "^/home(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/home(?:/)?$"
    },
    {
      "page": "/jewelry",
      "regex": "^/jewelry(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/jewelry(?:/)?$"
    },
    {
      "page": "/profile",
      "regex": "^/profile(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/profile(?:/)?$"
    },
    {
      "page": "/sale",
      "regex": "^/sale(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/sale(?:/)?$"
    },
    {
      "page": "/shoes",
      "regex": "^/shoes(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/shoes(?:/)?$"
    },
    {
      "page": "/swimming",
      "regex": "^/swimming(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/swimming(?:/)?$"
    },
    {
      "page": "/tourism",
      "regex": "^/tourism(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/tourism(?:/)?$"
    },
    {
      "page": "/trending",
      "regex": "^/trending(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/trending(?:/)?$"
    },
    {
      "page": "/winter-sports",
      "regex": "^/winter\\-sports(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/winter\\-sports(?:/)?$"
    }
  ],
  "dataRoutes": [],
  "rsc": {
    "header": "RSC",
    "varyHeader": "RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Router-Segment-Prefetch",
    "prefetchHeader": "Next-Router-Prefetch",
    "didPostponeHeader": "x-nextjs-postponed",
    "contentTypeHeader": "text/x-component",
    "suffix": ".rsc",
    "prefetchSuffix": ".prefetch.rsc",
    "prefetchSegmentHeader": "Next-Router-Segment-Prefetch",
    "prefetchSegmentSuffix": ".segment.rsc",
    "prefetchSegmentDirSuffix": ".segments"
  },
  "rewriteHeaders": {
    "pathHeader": "x-nextjs-rewritten-path",
    "queryHeader": "x-nextjs-rewritten-query"
  },
  "rewrites": []
}